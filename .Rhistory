# get total number of people in race
mutate(tot_race = sum(tot_in_race)) %>%
ungroup() %>%
# Calculate percent
mutate(perc_of_race = tot_in_race/tot_race)
# Get percent of each group in total
total <- training_for_index %>%
group_by(marital_status) %>%
summarize(tot_group = sum(fnlwgt)) %>%
ungroup() %>%
mutate(tot = sum(tot_group)) %>%
mutate(perc = tot_group/tot)
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc)
View(index_tbl)
source('~/Desktop/Allison Camm A&F Code/03_race_expl.R', echo=TRUE)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(actuals = test_labs, prediction = pred) %>%
transmute(diff = (prediction>=.5)&&!income_flag) %>%
summarize(error = mean(diff))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(actuals = test_labs, prediction = pred) %>%
transmute(diff = (prediction>=.5) &!income_flag) %>%
summarize(error = mean(diff))
mean(prediction)
mean(pred)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(actuals = test_labs, prediction = pred) %>%
transmute(diff = (prediction<.5) && income_flag) %>%
summarize(error = mean(diff))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(actuals = test_labs, prediction = pred) %>%
transmute(diff = (prediction<.5) && income_flag) %>%
summarize(error = mean(diff))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(actuals = test_labs, prediction = pred) %>%
transmute(diff = (prediction<.5) && income_flag)
mean(actuals)
mean(test_labs)
test_labs
sum(test_labs)
test_labs %>% summarize(mean('income_flag'))
test_labs %>% summarise(mean('income_flag'))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(actuals = test_labs, prediction = pred) %>%
summarize(avg_actual = mean(actuals),
avg_pred = mean(prediction))
data.frame(actuals = test_labs, prediction = pred)
head(data.frame(actuals = test_labs, prediction = pred))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(income_flag = test_labs, prediction = pred) %>%
summarize(avg_actual = mean(income_flag),
avg_pred = mean(prediction))
summary(test)
test_labs
summary('test_w_flag')
test_w_flag
summary(test)
test %>% distinct(income_flag)
training %>% distinct(income_flag)
# Bring in our test data
# We need to rerun all of data prep - we already did the cleaning, but need to redo the modeling prep
# Make a binary column from income flag and get rid of fnlwgt, which is not predictive
# note there's a . at the end of this column
test_w_flag <- test %>%
mutate(income_flag = if_else(income_flag == '<=50K.', FALSE, TRUE)) %>%
select(-fnlwgt) %>%
# Make sex binary where 1 equals male
mutate(sex = if_else(sex == 'Male', 1, 0))
# One hot encode all string variables
# First cast all strings as factors
columns <-  c('workclass',
'education', 'marital_status', 'occupation',
'relationship','race', 'native_country')
test_w_flag[columns] <- lapply(test_w_flag[columns], factor)
test_final <- one_hot(data.table(test_w_flag), cols = columns) %>%
select(-income_flag)
test_mat <- xgb.DMatrix(data = as.matrix(test_final))
test_labs <- as.list(test_w_flag['income_flag'])
# Predict with our test data
pred <- predict(model, test_mat)
# So our accuracy will be if pred >= .5 but label is False
data.frame(actuals = test_labs, prediction = pred) %>%
transmute(diff = (prediction>=.5)==income_flag) %>%
summarize(error = mean(diff))
summary(test_w_flag)
# So our accuracy will be if pred >= .5 but label is False
data.frame(actuals = test_labs, prediction = pred) %>%
transmute(diff = (prediction>=.5)!=income_flag) %>%
summarize(error = mean(diff))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(income_flag = test_labs, prediction = pred) %>%
summarize(avg_actual = mean(income_flag),
avg_pred = mean(prediction))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(income_flag = test_labs, prediction = pred) %>%
group_by(income_lfag, prediction) %>%
summarize_all(mean)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(income_flag = test_labs, prediction = pred) %>%
group_by(income_flag, prediction) %>%
summarize_all(mean)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(income_flag = test_labs, prediction = pred) %>%
mutate(prediction = if_else(prediction>=.5, TRUE, FALSE)) %>%
group_by(income_flag, prediction) %>%
summarize_all(mean)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(income_flag = test_labs, prediction = pred) %>%
mutate(prediction = if_else(prediction>=.5, TRUE, FALSE)) %>%
group_by(income_flag, prediction) %>%
summarize_all(mean(.))
?summarize_all
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
data.frame(income_flag = test_labs, prediction = pred) %>%
mutate(prediction = if_else(prediction>=.5, TRUE, FALSE)) %>%
group_by(income_flag, prediction) %>%
summarize_all(mean)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
actual_v_predicted = data.frame(income_flag = test_labs, prediction = pred) %>%
mutate(prediction = if_else(prediction>=.5, TRUE, FALSE))
actual_v_predited %>% summarize(mean(income_flag == TRUE & prediction == FALSE))
actual_v_predicted %>% summarize(mean(income_flag == TRUE & prediction == FALSE))
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == TRUE & prediction == FALSE))
test_labs
head(test)
head(test_w_flag)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
actual_v_predicted = data.frame(income_flag = test_w_flag, prediction = pred) %>%
mutate(prediction = if_else(prediction>=.5, TRUE, FALSE))
actual_v_predicted %>% summarize(mean(income_flag == TRUE & prediction == FALSE))
head(actual_v_predicted)
pred
head(pred)
View(input)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
actual_v_predicted = test_w_flag.cbind(pred) %>%
mutate(prediction = if_else(prediction>=.5, TRUE, FALSE))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
actual_v_predicted = test_w_flag %>%
cbind(pred) %>%
mutate(prediction = if_else(prediction>=.5, TRUE, FALSE))
test_w_flag %>%
cbind(pred)
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
actual_v_predicted = test_w_flag %>%
cbind(pred) %>%
mutate(prediction = if_else(pred>=.5, TRUE, FALSE))
# Let's also look at false negative rates by race
# Start by looking at total false negative rate
actual_v_predicted = test_w_flag %>%
cbind(pred) %>%
mutate(pred = if_else(pred>=.5, TRUE, FALSE))
actual_v_predicted %>% summarize(mean(income_flag == TRUE & prediction == FALSE))
actual_v_predicted %>% summarize(mean(income_flag == TRUE & pred == FALSE))
# Overall false negative rate is 13%
# What happens if we group by race
# Will need to join to all of test data to get this
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == TRUE & prediction == FALSE))
# Overall false negative rate is 13%
# What happens if we group by race
# Will need to join to all of test data to get this
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == TRUE & pred == FALSE))
# True positive rate
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == TRUE & pred == TRUE))
# True positive rate
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag))
# Overall false negative rate is 13%
# What happens if we group by race
# Will need to join to all of test data to get this
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == TRUE & pred == FALSE))
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == FALSE & pred == TRUE))
0.0402/0.0149
0.0402/0.0187
# True positive rate by race
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == TRUE & pred == TRUE))
# Overall false negative rate is 13%
# What happens if we group by race
# Will need to join to all of test data to get this
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag == TRUE & pred == FALSE))
# False positive rates by race
actual_v_predicted %>% group_by(race, sex) %>% summarize(mean(income_flag == FALSE & pred == TRUE))
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>% group_by(race, sex) %>% summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
# unencode sex
mutate(sex = if_else(0, 'Woman', 'Man')) %>%
write.csv(index_tbl, file = './false_positives')
# False positive rates by race
actual_v_predicted %>% group_by(race, sex) %>% summarize(mean(income_flag == FALSE & pred == TRUE))
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>% group_by(race, sex) %>% summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
# unencode sex
mutate(sex = if_else(sex == 0, 'Woman', 'Man')) %>%
write.csv(index_tbl, file = './false_positives')
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>% group_by(race, sex) %>% summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
# unencode sex
ungroup() %>%
mutate(sex = if_else(sex == 0, 'Woman', 'Man')) %>%
write.csv(index_tbl, file = './false_positives')
# False positive rates by race
actual_v_predicted %>% group_by(race, sex) %>% summarize(mean(income_flag == FALSE & pred == TRUE))
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>% group_by(race, sex) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
# unencode sex
ungroup() %>%
mutate(sex = if_else(sex <1, 'Woman', 'Man')) %>%
write.csv(index_tbl, file = './false_positives')
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>% group_by(race, sex) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
mutate(sex = if_else(sex<1, 'Woman', 'Man')) %>%
write.csv(index_tbl, file = './false_positives')
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>%
mutate(sex = if_else(sex<1, 'Woman', 'Man')) %>%
group_by(race, sex) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(index_tbl, file = './false_positives')
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>%
mutate(sex = if_else(sex<1, 'Woman', 'Man')) %>%
group_by(race, sex) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives')
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>%
mutate(sex = if_else(sex<1, 'Woman', 'Man')) %>%
group_by(race, sex) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives.csv')
head(trainign)
head(training)
# False positive rates by race
actual_v_predicted %>% group_by(race, sex) %>% summarize(mean(income_flag == FALSE & pred == TRUE))
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>%
mutate(sex = if_else(sex<1, 'Female', 'Male')) %>%
group_by(race, sex) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives.csv')
# Even though gender was not a top predicted variable, we still see a lot of variance in errors
# Rerun indexing with gender instead of race
for(i in seq_along(pred_var)){
# Table for percent of race in that group
by_race <- training_for_index %>%
mutate(sex = if_else(sex<1, 'Female', 'Male')) %>%
# Get total number of that group in each race
group_by(sex, !!pred_var[[i]]) %>%
summarize(tot_in_sex = sum(fnlwgt)) %>%
group_by(sex) %>%
# get total number of people in race
mutate(tot_sex = sum(tot_in_sex)) %>%
ungroup() %>%
# Calculate percent
mutate(perc_of_sex = tot_in_sex/tot_sex)
# Get percent of each group in total
total <- training_for_index %>%
group_by(!!pred_var[[i]]) %>%
summarize(tot_group = sum(fnlwgt)) %>%
ungroup() %>%
mutate(tot = sum(tot_group)) %>%
mutate(perc = tot_group/tot)
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_sex %>%
inner_join(total, by = quo_name(pred_var[[i]])) %>%
mutate(index = perc_of_sex/perc)
# Finally write to csv to be used in deck
write.csv(index_tbl, file = paste0('./', quo_name(pred_var[[i]]), '_sex_index.csv'))
}
# Table for percent of race in that group
by_sex <- training_for_index %>%
mutate(sex = if_else(sex<1, 'Female', 'Male')) %>%
# Get total number of that group in each race
group_by(sex, !!pred_var[[i]]) %>%
summarize(tot_in_sex = sum(fnlwgt)) %>%
group_by(sex) %>%
# get total number of people in race
mutate(tot_sex = sum(tot_in_sex)) %>%
ungroup() %>%
# Calculate percent
mutate(perc_of_sex = tot_in_sex/tot_sex)
# Even though gender was not a top predicted variable, we still see a lot of variance in errors
# Rerun indexing with gender instead of race
for(i in seq_along(pred_var)){
# Table for percent of race in that group
by_sex <- training_for_index %>%
mutate(sex = if_else(sex<1, 'Female', 'Male')) %>%
# Get total number of that group in each race
group_by(sex, !!pred_var[[i]]) %>%
summarize(tot_in_sex = sum(fnlwgt)) %>%
group_by(sex) %>%
# get total number of people in race
mutate(tot_sex = sum(tot_in_sex)) %>%
ungroup() %>%
# Calculate percent
mutate(perc_of_sex = tot_in_sex/tot_sex)
# Get percent of each group in total
total <- training_for_index %>%
group_by(!!pred_var[[i]]) %>%
summarize(tot_group = sum(fnlwgt)) %>%
ungroup() %>%
mutate(tot = sum(tot_group)) %>%
mutate(perc = tot_group/tot)
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_sex %>%
inner_join(total, by = quo_name(pred_var[[i]])) %>%
mutate(index = perc_of_sex/perc)
# Finally write to csv to be used in deck
write.csv(index_tbl, file = paste0('./', quo_name(pred_var[[i]]), '_sex_index.csv'))
}
training_for_index
seq_along
# Even though gender was not a top predicted variable, we still see a lot of variance in errors
# Rerun indexing with gender instead of race
for(i in seq_along(pred_var)){
# Table for percent of race in that group
by_sex <- training_for_index %>%
# Get total number of that group in each race
group_by(sex, !!pred_var[[i]]) %>%
summarize(tot_in_sex = sum(fnlwgt)) %>%
group_by(sex) %>%
# get total number of people in race
mutate(tot_sex = sum(tot_in_sex)) %>%
ungroup() %>%
# Calculate percent
mutate(perc_of_sex = tot_in_sex/tot_sex)
# Get percent of each group in total
total <- training_for_index %>%
group_by(!!pred_var[[i]]) %>%
summarize(tot_group = sum(fnlwgt)) %>%
ungroup() %>%
mutate(tot = sum(tot_group)) %>%
mutate(perc = tot_group/tot)
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_sex %>%
inner_join(total, by = quo_name(pred_var[[i]])) %>%
mutate(index = perc_of_sex/perc)
# Finally write to csv to be used in deck
write.csv(index_tbl, file = paste0('./', quo_name(pred_var[[i]]), '_sex_index.csv'))
}
xgb.plot.importance(importance_matrix = importance_matrix)
# Additionally take a look at age, which is in top 5
partial(model, train = training_final, pred.var = 'age', plot = TRUE)
# Race is a protected class and still near the top - see its affects
partial(model, train = training_final, pred.var = 'race_White', plot = TRUE)
# Whats our overall breakdown of target by race
actual_v_predicted %>% group_by(race) %>% summarize(mean(income_flag)
)
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>%
mutate(sex = if_else(sex<1, 'Female', 'Male')) %>%
group_by(race, sex) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives.csv')
# Also write out by just race
actual_v_predicted %>%
group_by(race) %>%
summarize(mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives_race.csv')
# Whats our overall breakdown of target by race
actual_v_predicted %>% group_by(race) %>% summarize(false_positive_rate = mean(income_flag))
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>%
mutate(sex = if_else(sex<1, 'Female', 'Male')) %>%
group_by(race, sex) %>%
summarize(false_positive_rate = mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives.csv')
# Also write out by just race
actual_v_predicted %>%
group_by(race) %>%
summarize(false_positive_rate = mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives_race.csv')
# False positive amongst white men is 5% - write this table out
actual_v_predicted %>%
mutate(sex = if_else(sex<1, 'Female', 'Male')) %>%
group_by(race, sex) %>%
summarize(`false positive rate` = mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives.csv')
# Also write out by just race
actual_v_predicted %>%
group_by(race) %>%
summarize(`false positive rate` = mean(income_flag == FALSE & pred == TRUE)) %>%
write.csv(file = './false_positives_race.csv')
?pivot_wider
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc) %>%
pivot_wider(names_from = race)
# Table for percent of race in that group
by_race <- training_for_index %>%
# Get total number of that group in each race
group_by(race, marital_status) %>%
summarize(tot_in_race = sum(fnlwgt)) %>%
group_by(race) %>%
# get total number of people in race
mutate(tot_race = sum(tot_in_race)) %>%
ungroup() %>%
# Calculate percent
mutate(perc_of_race = tot_in_race/tot_race)
# Get percent of each group in total
total <- training_for_index %>%
group_by(marital_status) %>%
summarize(tot_group = sum(fnlwgt)) %>%
ungroup() %>%
mutate(tot = sum(tot_group)) %>%
mutate(perc = tot_group/tot)
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc) %>%
pivot_wider(names_from = race)
head(index_tbl)
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc)
head(index)
head(index_tbl)
head(by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc) %>%
pivot_wider(values_from = race))
by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc) %>%
pivot_wider(values_from = race, names_from = race)
by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc) %>%
pivot_wider(values_from = race)
by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc, names_from = c('race')
)
by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc,) %>%
pivot_wider(values_from = race, names_from = c('race')
)
by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc,) %>%
pivot_wider(values_from = c('race'), names_from = race)
by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc,) %>%
select(index, race, marital_status) %>%
pivot_wider(values_from = index, names_from = race)
by_race %>%
inner_join(total, by = 'marital_status') %>%
mutate(index = perc_of_race/perc,) %>%
select(index, race, marital_status) %>%
pivot_wider(values_from = index, names_from = race, values_fill = 0)
# Now do this for each variable in our most predictive variables
for(i in seq_along(pred_var)){
# Table for percent of race in that group
by_race <- training_for_index %>%
# Get total number of that group in each race
group_by(race, !!pred_var[[i]]) %>%
summarize(tot_in_race = sum(fnlwgt)) %>%
group_by(race) %>%
# get total number of people in race
mutate(tot_race = sum(tot_in_race)) %>%
ungroup() %>%
# Calculate percent
mutate(perc_of_race = tot_in_race/tot_race)
# Get percent of each group in total
total <- training_for_index %>%
group_by(!!pred_var[[i]]) %>%
summarize(tot_group = sum(fnlwgt)) %>%
ungroup() %>%
mutate(tot = sum(tot_group)) %>%
mutate(perc = tot_group/tot)
# Join these two tables and divide percent of race with percent of total to get index
index_tbl <- by_race %>%
inner_join(total, by = quo_name(pred_var[[i]])) %>%
mutate(index = perc_of_race/perc) %>%
select(index, race, !!pred_var[[i]]) %>%
pivot_wider(values_from = index, names_from = race, values_fill = 0)
# Finally write to csv to be used in deck
write.csv(index_tbl, file = paste0('./', quo_name(pred_var[[i]]), '_index.csv'))
}
source('~/Desktop/Allison Camm A&F Code/wrapper.R', echo=TRUE)
source('/.03_model.R')
source('~/Desktop/Allison Camm A&F Code/wrapper.R', echo=TRUE)
source('/.03_race_expl.R')
source('/.03_race_expl.R')
source('./03_race_expl.R')
source('~/Desktop/Allison Camm A&F Code/wrapper.R', echo=TRUE)
